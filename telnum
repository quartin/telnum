#!/usr/bin/env python3

import sys

try:
    import phonenumbers
    from phonenumbers import geocoder, PhoneNumberType, carrier
except:
    sys.stderr.write('Could not find module "phonenumbers".\nTry `pip3 install phonenumbers`.\n')
try:
    import rapidjson
except: 
    sys.stderr.write('Could not find module "rapidjson".\nTry `pip3 install python-rapidjson`.\n')

if len(sys.argv) > 1:
    nums = sys.argv[1:]
else:
    nums = sys.stdin.readlines()
    nums = map(strip, nums)

json_array = []
for num in nums:
    try:
        x = phonenumbers.parse(num)

        def number_type_desc(num_type):
            if num_type == PhoneNumberType.PREMIUM_RATE:
                return 'premium-rate'
            elif num_type == PhoneNumberType.TOLL_FREE:
                return 'toll-free'
            elif num_type == PhoneNumberType.MOBILE:
                return 'mobile'
            elif num_type == PhoneNumberType.FIXED_LINE:
                return 'fixed-line'
            elif num_type == PhoneNumberType.FIXED_LINE_OR_MOBILE:
                return 'fixed-line or mobile'
            elif num_type == PhoneNumberType.SHARED_COST:
                return 'shared cost'
            elif num_type == PhoneNumberType.VOIP:
                return 'VoIP'
            elif num_type == PhoneNumberType.PERSONAL_NUMBER:
                return 'personal number'
            elif num_type == PhoneNumberType.PAGER:
                return 'pager'
            elif num_type == PhoneNumberType.UAN:
                return 'company "universalaccess number"'
            elif num_type == PhoneNumberType.VOICEMAIL:
                return 'voicemail'
            else:
                return 'unknown type'

        number = phonenumbers.format_number(x, phonenumbers.PhoneNumberFormat.INTERNATIONAL)
        numtype = number_type_desc(phonenumbers.number_type(x))
        country = geocoder.country_name_for_number(x, "en")
        desc = geocoder.description_for_number(x, "en")
        carrier_name = carrier.name_for_number(x, "en")
        
        def remove_empty_fields(s):
            return {out: i for out, i in s.items() if i is not ''}

        output = {'number': number, 'carrier': carrier_name, 'city': desc, 'country': country, 'phonetype': numtype}

        jsonstr = rapidjson.dumps(output)
        json_out = rapidjson.loads(jsonstr, object_hook = remove_empty_fields)

    except Exception as e:
        json_out = {'number': num, 'error': str(e)}

    json_array.append(json_out)

print(json_array)
